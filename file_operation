#encoding=utf-8
with open("file_01","a")as f:
    f.write("期待今天的自己过得比昨天更美好"+"\n")
    f.write("加油，少年")

"""
with open("file","r")as f:
    for index,line in enumerate(f.readlines()):
        print(line.strip())
        if index >9 and index<20:
            print(index,line)
"""
count = 0
with open("file","r")as f:
    # 打印初始光标,按照字符来计数
    print(f.tell())
    # print(f.read(5))
    print(f.readline())
    print(f.readline())
    print(f.readline())
    print(f.tell())
    # 将光标回到指定位置
    f.seek(24)
    print(f.readline())
    #打印文件字符编码
    print(f.encoding)
    # 返回文件在内存中的编号
    print(f.fileno())
    # 打印文件名
    print(f.name)
    # 将数据从内存中写到磁盘中
    f.flush()
# 读写模式，将字符串加入指定的位置，通过seek来移动光标
with open("file_01","r+")as f:
    # 文件截断
    f.truncate(10)
    f.write("期待今天的自己过得比昨天更美好" + "\n")
    f.write("加油，少年")
    print(f.tell())
    f.write("期待今天的自己过得比昨天更美好" + "\n")
    f.write("加油，少年""\n")
    f.write("-----------------1-----------------"+ "\n")
    f.write("-----------------2-----------------"+ "\n")
    f.write("-----------------3-----------------"+ "\n")
    f.write("-----------------4-----------------"+ "\n")
    print(f.tell())
    f.seek(10)
    print(f.readlines())


# flush将数据每s一次刷入到磁盘
import sys,time
for i in range(100):
    sys.stdout.write("#")
    sys.stdout.flush()
    time.sleep(0.1)
"""
####################################################################################################
"""

"""
修改文件内容
"""
f = open("file_02","r")
new_f = open("file_03","w")
"""
# 没有匹配到的内容也写到新文件，匹配到的内容替换后写入的新文件
循环旧文件，判断字符串在旧文件中使用replace将字符串替换为修改后的内容写到文件中
"""
for line in f:
    if "让我们给世界点火" in line:
        line = line.replace("让我们给世界点火","让我们给世界点把大火-----")
        new_f.write(line)
    else:
        new_f.write(line)
f.close()
new_f.close()




with open('abc1125')as f:
    with open('abc1126','w')as d:

        contents = f.readlines()
        for i in range(0,len(contents)):
            contents[i]=str(i+1)+':'+contents[i]
            print(contents)
            d.writelines(contents)
# 读文件函数
def read_file():
    with open('abc1125','r')as f:
        read_lines_from=f.readlines()
        return read_lines_from
# 写文件函数
def wirte_file(content):
    with open('abc1126',"w")as f:
        f.writelines(content)
# 定义一个新的文件列表
new_lines = []
# 循环打印读取文件的下标和内容
for index,line in enumerate(read_file()):
    # 将文件和下标写入到new_lines的列表中
    new_lines.append(str(index)+":"+line)
# 调用wwirte_file函数写入new_lines列表
wirte_file(new_lines)

#文件重命名
import os
def rename_files():
    file_list = os.listdir('D:\/untitled/\learing/\day_04')
    for file_name in file_list:
        if file_name.endswith('abcd123.txt'):
            print(file_name)
            os.rename(file_name,'abc.txt')
rename_files()

# 用函数的方案替换文件内容并写入新文件
def read_file(filename):
    with open(filename,'r')as f:
        return f.readlines()
def wirte_file(filename,line):
    with open(filename,'a+')as f:
        f.writelines(line)
# read_file = read_file("test_01.txt")
for line in read_file("test_01.txt"):
    if "Java" in line:
        i = line.replace("Java","Python")
        wirte_file('test_03.txt',i)
    else:
        wirte_file('test_03.txt',line)


#将txt结尾的文件挪到backup目录
import shutil,os
if not os.path.dirname("backup"):
    os.mkdir("backup")
for file in os.listdir('.'):
    if os.path.splitext(file)[1]=='.txt':
        shutil.copy(file,os.path.join('backup',file))

#函数方法实现
import shutil,os
def mv_backup(name):
    if not os.path.dirname("backup"):
        os.mkdir("backup")
    for file in os.listdir('.'):
        if os.path.splitext(file)[1] == name:
            shutil.copy(file, os.path.join('backup', file))
mv_backup('.txt')

# 复制目录
import shutil,os
shutil.copytree('backup', 'backup2')

# 删除目录,当目录不为空的时候，无法删除
os.remove("backup2")

# 使用shutil模块可以强制删除目录
shutil.rmtree("backup2")



# 异常处理
"""
try:
#   没有匹配到异常则执行此代码块的逻辑
except
#     匹配到异常执行此代码块的逻辑
finally:
#   上述两块逻辑处理完都会执行此逻辑
"""
