#encoding=utf-8
Alist = ["Docker","Logstach","DB",["Mysql","Redis"],"Lvs"]
"""
列表增加操作
"""
Alist.append("DPDK")
"""
['Docker', 'Logstach', 'DB', ['Mysql', 'Redis'], 'Lvs', 'DPDK']
"""
Alist.insert(3,"Pika")
"""
['Docker', 'Logstach', 'DB', 'Pika', ['Mysql', 'Redis'], 'Lvs', 'DPDK']
"""
"""
列表查询操作
"""
print(Alist)
"""
['Docker', 'Logstach', 'DB', 'Pika', ['Mysql', 'Redis'], 'Lvs', 'DPDK']
"""
#根据索引取值，切片
print(Alist[3])
print(Alist[1:3])
print(Alist[-2])
"""
Pika
['Logstach', 'DB']
Lvs
"""
#查找索引
print(Alist.index("DB"))
print(Alist[Alist.index("DB")])
"""
2
DB
"""

aList = ['apple', 100, 0.01, 'banana','A','B','C']
# 通过下标访问
print(aList[0])
# 通过列表切片获取一部分内容
print(aList[3:5])

# 列表嵌套，支持嵌套列表、元组、字典
bList=[100,200,['aaa','bbb','ccc']]
CList=[100,200,('aaa','bbb','ccc')]
Dlist=[{'b': 1}, {'a': 3}, {'c': 5}]
print(bList[2][1])
print(CList[2][2])
print(Dlist[1])

#列表添加 append将字符串加到列表结尾    insert按照当前礼包值的索引插入到指定位置
bList.append("400")
bList.insert(2,"300")
print(bList)
"""
[100, 200, '300', ['aaa', 'bbb', 'ccc'], '400']
"""

#列表删除操作 pop删除列表中最后一个字符串， remove删除指定字符串
bList.pop()
bList.remove("300")
del bList

#列表支持+*
list_n1 = [1,2,3]
list_n2 = [100,200,300]
# 列表合并
list_n3 = list_n1+list_n2
print(list_n3)
"""
[1, 2, 3, 100, 200, 300]
"""
list_n4 = list_n1*3
print(list_n4)
"""
[1, 2, 3, 1, 2, 3, 1, 2, 3]
"""
# sort排序 倒序
list_n5 = [1,100,90,32.4,-20]
list_n5.sort(reverse=True)
print(list_n5)
"""
[100, 90, 32.4, 1, -20]
"""
# sort排序 正序
list_n5.sort(reverse=False)
print(list_n5)
"""
[-20, 1, 32.4, 90, 100]
"""
# 获取列表中最小值
print(min(list_n5))
"""
-20
"""
# 获取列表中最大值
print(max(list_n5))
"""
100
"""
# 利用len函数获取列表长度
print(len(list_n5))
"""
5
"""
# 列表的扩展 //用内置extend函数，看起来和+差不多，其实区别在于+是返回一个新的列表，而extend是直接修改了列表
list_n4.extend(list_n5)
print(list_n4)
"""
[1, 2, 3, 1, 2, 3, 1, 2, 3, -20, 1, 32.4, 90, 100]
"""
# 查找列表中某一个元素的索引//内置函数index
list_str = ["A" ,"comfortable" ,"night"]
print(list_str.index("night"))
print(list_str[list_str.index("night")])
"""
2
night
"""
# 统计某个元组在列表里面的次数,内置函数count
list_str = ["A" ,"comfortable" ,"night"]
print(list_str.count("night"))
"""
1
"""

# 字典的排序  sorted()函数
my_dict = {"cc": 100, "aa": 200, "bb": 10}
# 按照key排序
print(sorted(my_dict.items(),key=lambda x:x[0]))
"""
[('aa', 200), ('bb', 10), ('cc', 100)]
"""
# 按照vaule排序
print(sorted(my_dict.items(),key=lambda x:x[1]))

# 字典中提取部分子集
students_score={'jack':80,'james':91,'leo':100,'sam':60}
# 提取分数超过90分的学生信息，并变成字典
good_score = {name:sorce for name,sorce in students_score.items()  if sorce >90}
print(good_score)
"""
{'leo': 100, 'james': 91}
"""
# 拆分版本
new_dict={}
for name,achievement in students_score.items():
    if achievement >90:
        new_dict[name]=achievement
print(new_dict)
"""
{'james': 91, 'leo': 100}
"""
# 字典的计算
stocks={'wonder':25.6,'hulk':32.3,'etcd':299.5,'dpdk':18.6}
# 提取 vaule中的最大值和最小值
print(max(stocks.values()))
print(min(stocks.values()))
"""
299.5
18.6
"""
#利用神奇的zip()进行翻转
stocks={'wonder':25.6,'hulk':32.3,'etcd':299.5,'dpdk':18.6}
new_stocks =zip(stocks.values(),stocks.keys())
print(new_stocks)

# 字典翻转
stocks={'wonder':25.6,'hulk':32.3,'etcd':299.5,'dpdk':18.6}
new_stocks  = dict([(v,k) for k,v in stocks.items()])
print(new_stocks)
"""
{32.3: 'hulk', 25.6: 'wonder', 18.6: 'dpdk', 299.5: 'etcd'}
"""
# 字典翻转
new_dict_n1={}
for v,k in stocks.items():
    new_dict_n1[k]=v
print(new_dict_n1)
"""
{32.3: 'hulk', 25.6: 'wonder', 18.6: 'dpdk', 299.5: 'etcd'}
"""
# join的用法
# 原因是因为若要连接字符串:S1+S2+S3+....+SN,由于字符串是不可变的对象,执行一次就要申请一块新的内存，这样的话在N个字符串连接的过程中，会产生N-1个中间结果,每产生一个中间结果就要申请一次内存，这样会严重影响执行效率.
# 而join不一样，它是一次性申请总的内存，然后把字符串里面的每一个元素复制到内存中去，所以join会快很多.
str5='+'.join(['1','2'])
print(str5)

# 用id()函数来查看对象的唯一识别号,发现a,b是一样的,原因是因为b只是a的引用，都是同一个地址，并没有实现真正的copy
a_n1 = [4,5,6]
b = a_n1
b.append(7)
print(id(a_n1),a_n1)
print(id(b),b)
"""
2626740480712 [4, 5, 6, 7]
2626740480712 [4, 5, 6, 7]
"""
# 列表copy
import copy
a_n2 = [8,9,10]
b_n1 = copy.copy(a_n2)
print(id(a_n2),a_n2)
print(id(b_n1),b_n1)
"""
内存地址发生变化
2564033900424 [8, 9, 10]
2564033900744 [8, 9, 10]
"""
# 字典缺省值设置
aDict={}.fromkeys(('aa','bb','cc'),100)
bDict={}.fromkeys(("ee","ff","gg"),100)
for k,v in bDict.items():
    print(k,v)
"""
ff 100
ee 100
gg 100
"""
# 获取字典 中元素，不存在则返回默认值
cDict = {}.fromkeys(("Tom","Jack","Mike"),100)
print(cDict.get("Tom","Not Found"))
print(cDict.get("Test","Not Found"))
"""
100
Not Found
"""
# 列表的下标是负数的[-len,len),切记切记
a_n3 = ["Apple","Mac","Book"]
for index,vaule in enumerate(a_n3):
    if index<3:
        print(index)
"""
0
1
2
"""
# 循环访问序列中的元素和索引
# 比如我们要把列表中的10替换成3,解决方案:
a_n4=[1,2,10,4]
for index,item in enumerate(a_n4):
    if item>9:
        a_n4[index]=3
print(a_n4)
"""
[1, 2, 3, 4]
"""
# 使用字典格式化字符串
aInfo={'Wangdachui':3000,'NiuYun':2000,'LinLing':4500,'Tianqi':8000}
template='''
Welcome to the pay wall.
NiuYun' salary is %(NiuYun)s.
Wangdachui's salary is %(Wangdachui)s.
'''
print(template%aInfo)
# daemon 02 %(xxx)s 固定格式
user_info = {"name":"Tom","age":"18","salary":"10000"}
aaa = '''
username:%(name)s
userage:%(age)s
usersalary:%(salary)s
'''
print(aaa%user_info)
"""
username:Tom
userage:18
usersalary:10000
"""

# 字典的更新
aInfo={'Wang':3000,'NiuYun':2000,'Lin':4500,'Tianqi':8000}
bInfo={'Wang':4000,'NiuYun':8000,'Ming':3300}
aInfo.update(bInfo)
print(aInfo)
"""
{'Lin': 4500, 'NiuYun': 8000, 'Ming': 3300, 'Wang': 4000, 'Tianqi': 8000}
"""

# 找到两个字典的相同的内容
a_n5={"aa":100,"bb":200,"cc":300}
a_n6={"aa":100,"bb":300,"cc":300}
print(set(a_n5.items()) & set(a_n6.items()))
"""
{('aa', 100), ('cc', 300)}
"""
